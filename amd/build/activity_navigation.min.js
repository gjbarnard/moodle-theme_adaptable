define("theme_adaptable/activity_navigation",["exports","core/ajax","core/reactive","core_courseformat/courseeditor","core/log","core/notification","core/templates"],(function(_exports,_ajax,_reactive,_courseeditor,_log,_notification,_templates){function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}
/**
   * Activity navigation main component.
   *
   * @module     theme_adaptable/core_course/activity_navigation
   * @class      theme_adaptable/core_course/activity_navigation
   * @copyright  2025 G J Barnard
   *               {@link https://moodle.org/user/profile.php?id=442195}
   *               {@link https://gjbarnard.co.uk}
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_ajax=_interopRequireDefault(_ajax),_log=_interopRequireDefault(_log),_notification=_interopRequireDefault(_notification),_templates=_interopRequireDefault(_templates);class Component extends _reactive.BaseComponent{static singleton=!1;create(){this.name="theme_adaptable_activity_navigation"}static init(target){if(!this.singleton)return _log.default.debug("Adaptable activity navigation Init"),this.singleton=!0,new this({element:document.getElementById(target),reactive:(0,_courseeditor.getCurrentCourseEditor)()});_log.default.debug("Adaptable activity navigation Inited")}getWatchers(){return[{watch:"cm.completionstate:updated",handler:this._completionstateUpdated}]}async _completionstateUpdated(_ref){let{element:element}=_ref;_log.default.debug("Adaptable activity navigation _completionstateUpdated element: "+JSON.stringify(element));const request={methodname:"theme_adaptable_activity_navigation",args:{moduleid:element.id}};_ajax.default.call([request])[0].then((jsoncontextstring=>{if(_log.default.debug("Adaptable activity navigation update: "+jsoncontextstring),""!==jsoncontextstring){const context=JSON.parse(jsoncontextstring);_templates.default.renderForPromise("theme_adaptable/core_course/activity_navigation",context).then((_ref2=>{let{html:html,js:js}=_ref2;_templates.default.replaceNodeContents("#adaptable-activity-navigation",html,js)})).catch((error=>_notification.default.exception(error)))}else _notification.default.addNotification({message:"Adaptable activity navigation update navigation not generated.",type:"error"})})).catch((error=>{_notification.default.addNotification({message:error.message,type:"error"})}))}}return _exports.default=Component,_exports.default}));

//# sourceMappingURL=activity_navigation.min.js.map