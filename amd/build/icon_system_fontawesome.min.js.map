{"version":3,"file":"icon_system_fontawesome.min.js","sources":["../src/icon_system_fontawesome.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n//\n// Adaptable theme.\n//\n// An Icon System implementation for FontAwesome based on core/icon_system_fontawesome by\n// Damyon Wiese.\n//\n// @module theme_adaptable/icon_system_fontawesome\n// @copyright  2017 Damyon Wiese\n// @copyright  2023 G J Barnard.\n// @author     G J Barnard -\n//               {@link https://moodle.org/user/profile.php?id=442195}\n//               {@link https://gjbarnard.co.uk}\n// @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later.\n//\n\nimport {call as fetchMany} from 'core/ajax';\nimport LocalStorage from 'core/localstorage';\nimport IconSystem from 'core/icon_system';\nimport * as Mustache from 'core/mustache';\nimport * as Config from 'core/config';\nimport * as Url from 'core/url';\n\n/**\n * An set of properties for an icon.\n * @typedef {object} IconProperties\n * @property {array} attributes\n * @private\n */\n\n/**\n * The FontAwesome icon system.\n */\nexport default class IconSystemFontawesome extends IconSystem {\n    /**\n     * @var {Map} staticMap A map of icon names to FA Icon.\n     * @private\n     */\n    static staticMap = null;\n\n    /**\n     * @var {Promise} fetchPromise The promise used when fetching the result\n     * @private\n     */\n    static fetchPromise = null;\n\n    /**\n     * @var {string} cacheKey The key used to store the icon map in LocalStorage.\n     * @private\n     */\n    static cacheKey = `core_iconsystem/theme/${Config.theme}/core/iconmap-fontawesome`;\n\n    /**\n     * Prefetch resources so later calls to renderIcon can be resolved synchronously.\n     *\n     * @returns {Promise<IconSystemFontawesome>}\n     */\n    init() {\n        if (IconSystemFontawesome.staticMap) {\n            return Promise.resolve(this);\n        }\n\n        if (this.getMapFromCache()) {\n            return Promise.resolve(this);\n        }\n\n        if (IconSystemFontawesome.fetchPromise) {\n            return IconSystemFontawesome.fetchPromise;\n        }\n\n        return this.fetchMapFromServer();\n    }\n\n    /**\n     * Get the icon map from LocalStorage.\n     *\n     * @private\n     * @returns {Map}\n     */\n    getMapFromCache() {\n        const map = LocalStorage.get(IconSystemFontawesome.cacheKey);\n        if (map) {\n            IconSystemFontawesome.staticMap = new Map(JSON.parse(map));\n        }\n        return IconSystemFontawesome.staticMap;\n    }\n\n    /**\n     * Fetch the map data from the server.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _fetchMapFromServer() {\n        return fetchMany([{\n            methodname: 'theme_adaptable_output_load_fontawesome_icon_map',\n            args: {\n            },\n        }], true, false, false, 0, Config.themerev)[0];\n    }\n\n    /**\n     * Fetch the map data from the server.\n     *\n     * @returns {Promise<IconSystemFontawesome>}\n     * @private\n     */\n    async fetchMapFromServer() {\n        IconSystemFontawesome.fetchPromise = (async () => {\n            const mapData = await this._fetchMapFromServer();\n\n            IconSystemFontawesome.staticMap = new Map(Object.entries(mapData).map(([, value]) => ([\n                `${value.component}/${value.pix}`,\n                value.to,\n            ])));\n            LocalStorage.set(\n                IconSystemFontawesome.cacheKey,\n                JSON.stringify(Array.from(IconSystemFontawesome.staticMap.entries())),\n            );\n\n            return this;\n        })();\n\n        return IconSystemFontawesome.fetchPromise;\n    }\n\n    /**\n     * Render an icon.\n     *\n     * @param {string} key\n     * @param {string} component\n     * @param {string} title\n     * @param {string} template\n     * @return {string} The rendered HTML content\n     */\n    renderIcon(key, component, title, template) {\n        const iconKey = `${component}/${key}`;\n        const mappedIcon = IconSystemFontawesome.staticMap.get(iconKey);\n        const unmappedIcon = this.getUnmappedIcon(mappedIcon, key, component, title);\n\n        const context = {\n            title,\n            unmappedIcon,\n            alt: title,\n            key: mappedIcon,\n        };\n\n        if (typeof title === \"undefined\" || title === '') {\n            context['aria-hidden'] = true;\n        }\n\n        return Mustache.render(template, context).trim();\n    }\n\n    /**\n     * Get the unmapped icon content, if the icon is not mapped.\n     *\n     * @param {IconProperties} mappedIcon\n     * @param {string} key\n     * @param {string} component\n     * @param {string} title\n     * @returns {IconProperties|null}\n     * @private\n     */\n    getUnmappedIcon(mappedIcon, key, component, title) {\n        if (mappedIcon) {\n            return null;\n        }\n\n        return {\n            attributes: [\n                {name: 'src', value: Url.imageUrl(key, component)},\n                {name: 'alt', value: title},\n                {name: 'title', value: title}\n            ],\n        };\n    }\n\n    /**\n     * Get the name of the template to pre-cache for this icon system.\n     *\n     * @return {string}\n     * @method getTemplateName\n     */\n    getTemplateName() {\n        return 'theme_adaptable/pix_icon_fontawesome';\n    }\n}\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireDefault","_localstorage","_icon_system","Mustache","Config","Url","IconSystemFontawesome","IconSystem","static","theme","init","staticMap","this","getMapFromCache","Promise","resolve","fetchPromise","fetchMapFromServer","map","LocalStorage","cacheKey","Map","JSON","parse","_fetchMapFromServer","fetchMany","methodname","args","themerev","mapData","entries","_ref","value","component","pix","to","stringify","Array","from","renderIcon","key","title","template","iconKey","mappedIcon","context","unmappedIcon","getUnmappedIcon","alt","render","trim","attributes","name","imageUrl","getTemplateName","_exports"],"mappings":"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"}